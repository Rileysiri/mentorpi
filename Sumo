#!/usr/bin/env python3
import numpy as np
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time, threading, math
import cv2
import mediapipe as mp
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from ros_robot_controller_msgs.msg import BuzzerState

class RobotMover(Node):
    def __init__(self):
        super().__init__('robot_mover')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        self.buzzer_pub = self.create_publisher(BuzzerState, '/ros_robot_controller/set_buzzer', 1)
        
        # CV Bridge and frame storage.
        self.bridge = CvBridge()
        self.frame = None

        # State flags.
        self.face_detected = False
        self.current_gesture = None

        # Debug flag.
        self.debug = True


        # Subscribe to the camera image topic.
        self.create_subscription(Image, 'ascamera/camera_publisher/rgb0/image',
                                 self.image_callback, 1)

    def image_callback(self, msg):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
            self.frame = cv_image
            if self.debug:
                self.get_logger().info("Image received in callback.")
                print("DEBUG: Image received in callback.")
        except Exception as e:
            self.get_logger().error("Failed to convert image: " + str(e))
            print("DEBUG: Error in image callback:", e)

    ##################################################
    # Basic Movements
    ##################################################
    def move_robot(self, x, y, z, duration):
        msg = Twist()
        msg.linear.x = float(x)
        msg.linear.y = float(y)
        msg.angular.z = float(z)
        start_time = time.time()
        while (time.time() - start_time < duration) and rclpy.ok():
            self.publisher_.publish(msg)
            time.sleep(0.05)
        self.stop_robot()

    def stop_robot(self):
        msg = Twist()
        self.publisher_.publish(msg)

    ##################################################
    # Move towards the marker
    ##################################################
    def move_towards_red_marker(self):
        if self.frame is None:
            return
        #Convert the image to HSV color space
        hsv_frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)

        #Define the range for the red color
        lower_red = np.array([0, 100, 100])
        upper_red = np.array([10, 255, 255])
        lower_red2 = np.array([160, 100, 100])
        upper_red2 = np.array([180, 255, 255])

        #create masks for red color
        mask1 = cv2.inRange(hsv_frame, lower_red, upper_red)
        mask2 = cv2.inRange(hsv_frame, lower_red2, upper_red2)
        mask = mask1 | mask2

        #Find contours of the red areas
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            #Find the largest contour
            largest_contour = max(contours, key = cv2.contourArea)
            M = cv2.moments(largest_contour)
            if M["m00"] > 0:
                #Calculate the center of the contour
                cX = int(M["m10"] / M["m00"])
                cY = int(M["m01"] / M["m00"])

                #Draw the contour and center on the frame
                cv2.drawContours(self.frame, [largest_contour], -1, (0, 255, 0), 2)
                cv2.circle(self.frame, (cX, cY), 7, (255, 255, 255), -1)

                #Move towards the red marker
                #Assuming the frame width is 320, adjust the movement basedon the position of the center
                frame_width = self.frame.shape[1]
                error = cX - (frame_width // 2)

                #Simple proportional control
                if abs(error) < 20:
                    self.move_robot(0.2, 0.0, 0.0, 0.1) #Move forward
                else:
                    angular_z = -float(error) / (frame_width // 2) #Normalize error
                    self.move_robot(0.0, 0.0, angular_z, 0.1) #Rotate towards the marker

    ##################################################
    # Frame Processing / Subscription Loop
    ##################################################
    def sensor_listener(self):
        # Wait for the first frame.
        while self.frame is None and rclpy.ok():
            if self.debug:
                self.get_logger().info("Waiting for first frame...")
                print("DEBUG: Waiting for first frame...")
            time.sleep(0.1)
        while rclpy.ok():
            try:
                if self.frame is None:
                    if self.debug:
                        self.get_logger().info("No frame available yet.")
                        print("DEBUG: No frame available yet.")
                    time.sleep(0.05)
                    continue

                #Procss the frame to move towards the red marker
                self.move_towards_red_marker()

                cv2.imshow("Robot Camera Feed", self.frame)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
            except Exception as ex:
                self.get_logger().error("Erro in sensor_listener loop: " + str(ex))
                print("DEBUG: Error in sensor_listener loop: ", ex)
            time.sleep(0.05)
        cv2.destroyAllWindows()

    ##################################################
    # Main Loop
    ##################################################
    def run_sumo(self):
        self.get_logger().info("Robot is ready to move towards the red marker.")
        print("DEBUG: Robot is ready to move towards the red marker.")
        while rclpy.ok():
            time.sleep(0.05)

def main(args=None):
    rclpy.init(args=args)
    mover = RobotMover()

    spin_thread = threading.Thread(target=rclpy.spin, args=(mover,))
    spin_thread.start()

    sensor_thread = threading.Thread(target=mover.sensor_listener)
    sensor_thread.start()

    mover.get_logger().info("Sensor listener thread started.")
    print("DEBUG: Sensor listener thread started.")

    try:
        mover.run_talent_show()
    except KeyboardInterrupt:
        mover.get_logger().info("Sumo interrupted.")
        print("DEBUG: Sumo interrupted.")
    mover.destroy_node()
    rclpy.shutdown()
    sensor_thread.join()
    spin_thread.join()

if __name__ == '__main__':
    main()
